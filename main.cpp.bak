/* Copyright (C) 2015 HAN Jae Seung, JAES Electronics. All rights reserved.
   |
   |    rolling spider 
   |     --Top view--
   |   .....pitch,x.......
   |   2     head      0
   |    \     0|0     /
   |      \   0|0   /
   |        \  |  /
   |          \|/______> roll,y
   |          /|\
   |        /     \
   |      /         \
   |    /             \
   |   3                1
   */

#include <stdio.h>
#include <errno.h>
#include <ctype.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>
#include <signal.h>
#include <sys/param.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/poll.h>
#include <stdint.h>

#include <pthread.h>
#include <sys/time.h>
#include <math.h>
#include <time.h>

#include <sched.h>

#include "HAL_motor_J.h"
#include "HAL_pid_J.h"
#include "HAL_sensor_J.h"
#include "gpio_J.h"
#include "battery_J.h"
#include "def_J.h"
#include "ms5607.h"
#include "lpf_J.h"
#include "helper_3dmath.h"

#define DEBUG(x)  //printf(x)

/*CMD CMD*/
typedef enum {
    EMERGENCY = 0, //system stop all motor init
    TAKEOFF = 1, // start timer and motor and pid
    SYSTEM_KONST = 2,// input = sys Kp Ki Kd 
    THROTT_INPUT = 3,
    TOTAL_SENSOR = 4,
    //    MAHONY = 5,
    CMD_PRESS = 7,
    LOAD = 8,
    TARGET = 9,
}SYSTEM_CMD;

typedef enum{
    S_SENSOR=2,
    S_ACCEL=0,
    S_GYRO=1,
    S_BATT=3,
    S_BARO=4,
    S_dT=5,
    S_FULL = 6,
    S_WORLD_ACC = 7,
    //	S_KALMAN =  ,// motor value 0 1 2 3 input
    //	S_COMPLEMENTARY = 3,
    //	S_NEW = 4,
    //	S_QUAT = 5,
    //	S_QUAT_TO_EULER = 6,
    //	S_INTEGRAL = 7,
    //	S_MOTOR = 8,
}SENSRO_CMD;


extern Quaternion q;           // [w, x, y, z]         quaternion container
extern VectorInt16 aa;         // [x, y, z]            accel sensor measurements
extern VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
extern VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
extern VectorFloat gravity;    // [x, y, z]            gravity vector
extern float euler[3];         // [psi, theta, phi]    Euler angle container
extern float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

VectorInt16 prev_aaWorld;


uint32_t mask_bit =0;
timer_t timer1;
int TIMER_EMER =1;
int thrott;
uint32_t cnt;
sensor_struct_t angle;
pid_control_t pid[MAX_SYSTEM];
sensor_t dt=0.01;
sensor_t dt_prev;

int32_t ground_press;
#define WEIGHT_P_ERR 0.3f
sensor_t press_err=0;
motor_t target[MAX_SYSTEM];
#define WEIGHT_Z_ERR 0.0001f
sensor_t z_HDR;

void main_control_code  (int signum){
    GpioWrite(LED_RED_LEFT,1);
    struct timespec tp;
    if (clock_gettime (CLOCK_MONOTONIC, &tp) == -1)
        perror ("clock_gettime");

    //	sprintf (buffer, "%ld s %ld ns overrun %d", tp.tv_sec,
    //			tp.tv_nsec, timer_getoverrun (timer1));
    //	write (STDOUT_FILENO, buffer, strlen (buffer)); 

    sensor_t now= tp.tv_nsec*pow(10,-9);
    dt =  now - dt_prev;
    if(dt<0){
        dt += 1;
    }
    dt_prev = now;

    //	float gx = (gyroX*250/32768)*DEG_TO_RAD;
    //	float gy = (gyroY*250/32768)*DEG_TO_RAD;
    //	float gz = (gyroZ*250/32768)*DEG_TO_RAD;
    //	float ax = accX*GRAVITY*2/32768;
    //	float ay = accY*GRAVITY*2/32768;
    //	float az = accZ*GRAVITY*2/32768;
    //	MahonyAHRSupdateIMU(gx,gy,gz,ax,ay,az);	
    //	Yaw_m=atan2(2*q1*q2-2*q0*q3,2*q0*q0+2*q1*q1-1)*RAD_TO_DEG;
    //	Pitch_m=-1*asin(2*q1*q3+2*q0*q2)*RAD_TO_DEG;
    //	Roll_m=atan2(2*q2*q3-2*q0*q1,2*q0*q0+2*q3*q3-1)*RAD_TO_DEG;

    sensor_read(&angle,dt);
    if(TIMER_EMER==1){
        z_HDR = aaWorld.z;
        return ;
    }
    //    sensor_filtering(KALMAN, &angle,dt);

    //    float  temp_yaw = angle.mpu.gyroZ*yaw_factor+(1-yaw_factor)*temp_prev;
    //    angle.yaw += ((float)angle.mpu.gyroZ-temp_yaw)/131*dt;
    //    temp_prev = temp_yaw;
    //printf("dt %10.5f RR %+10.5f PP %+10.5f ",dt,angle.roll,angle.pitch);
    //printf("AX %+6d AY %+6d AZ %+6d ",angle.mpu.accX,angle.mpu.accY,angle.mpu.accZ);
    //printf("dt %f ro %f pit %f x %d y %d z %d ",dt,angle.roll,angle.pitch,angle.mpu.accX,angle.mpu.accY,angle.mpu.accZ);
    //printf("GX %+6d GY %+6d GZ %+6d ",angle.mpu.gyroX,angle.mpu.gyroY,angle.mpu.gyroZ);
    //printf("\n");

#if 0
    pid_setErr(&pid[XAXIS],);
    pid_setErrD(&pid[XAXIS],,dt);
    pid_setErrI(&pid[XAXIS],,dt);
    int xForce = pid_control(&pid[XAXIS]);

    pid_setErr(&pid[YAXIS],);
    pid_setErrD(&pid[YAXIS],,dt);
    pid_setErrI(&pid[YAXIS],,dt);
    int yForce = pid_control(&pid[YAXIS]);

    pid_setErr(&pid[ZAXIS],);
    pid_setErrD(&pid[ZAXIS],,dt);
    pid_setErrI(&pid[ZAXIS],,dt);
    int zForce = pid_control(&pid[ZAXIS]);
#endif 

    pid_setErr(&pid[XAXIS],aaWorld.x);
    pid_setErrD(&pid[XAXIS],aaWorld.x-pid[XAXIS].err_prev,dt);
    pid_setErrI(&pid[XAXIS],pid[XAXIS].err,dt);
    pid_setErr_prev(&pid[XAXIS],pid[XAXIS].err);
    motor_t tar_pit=pid_control(&pid[XAXIS]);
    //   printf("tp %f ",tar_pit); 

    pid_setErr(&pid[YAXIS],aaWorld.y);
    pid_setErrD(&pid[YAXIS],aaWorld.y-pid[YAXIS].err_prev,dt);
    pid_setErrI(&pid[YAXIS],pid[YAXIS].err,dt);
    pid_setErr_prev(&pid[YAXIS],pid[YAXIS].err);
    motor_t tar_rol=pid_control(&pid[YAXIS]);
    //   printf("tr %f ",tar_rol); 


    pid_setErr(&pid[ROLL],angle.roll-target[ROLL]-tar_rol);
    pid_setErrD(&pid[ROLL],angle.mpu.gyroX/16.4,dt);
    pid_setErrI(&pid[ROLL],pid[ROLL].err,dt);
    int rForce=(int)pid_control(&pid[ROLL]);

    pid_setErr(&pid[PITCH],target[PITCH]-angle.pitch-tar_pit);
    pid_setErrD(&pid[PITCH],angle.mpu.gyroY/16.4,dt);
    pid_setErrI(&pid[PITCH],pid[PITCH].err,dt);
    int pForce =(int) pid_control(&pid[PITCH]);



    pid_setErr(&pid[YAW], angle.mpu.gyroZ/16.4 );
    pid_setErrD(&pid[YAW],pid[YAW].err,dt);
    pid_setErr_prev(&pid[YAW],pid[YAW].err);
    //pid_setErrI(&pid[YAW],pid[PITCH].err,dt);
    int yawForce =(int) pid_control(&pid[YAW]);
    //printf("y %f ",yawForce);

    press_err = WEIGHT_P_ERR * (ground_press -angle.ms_pressure -target[PRESS]) + (1-WEIGHT_P_ERR)*press_err;	
    pid_setErr(&pid[PRESS],press_err);
    pid_setErrD(&pid[PRESS],pid[PRESS].err-pid[PRESS].err_prev,dt);
    pid_setErrI(&pid[PRESS],pid[PRESS].err,dt);
    pid_setErr_prev(&pid[PRESS],pid[PRESS].err);
    int Pthro = pid_control(&pid[PRESS]);

#if 1 

    //  printf("%d\n",angle.ms_pressure);
    //sensor_t lpf_out = lpf_calculate((sensor_t)(angle.ms_pressure));

    z_HDR = WEIGHT_Z_ERR * (aaWorld.z) + (1-WEIGHT_Z_ERR)*z_HDR;	

    pid_setErr(&pid[ZAXIS],(aaWorld.z-z_HDR)/4096);
    pid_setErrD(&pid[ZAXIS],pid[ZAXIS].err-pid[ZAXIS].err_prev,dt);
    pid_setErrI(&pid[ZAXIS],pid[ZAXIS].err,dt);
    pid_setErr_prev(&pid[ZAXIS],pid[ZAXIS].err);
    int Zthro = pid_control(&pid[ZAXIS]);
#endif
    int m_0 = pid_feedforward((rForce+pForce+yawForce)/2+thrott+Zthro+Pthro);
    int m_1 = pid_feedforward((rForce-pForce-yawForce)/2+thrott+Zthro+Pthro);
    int m_2 = pid_feedforward((-rForce+pForce+yawForce)/2+thrott+Zthro+Pthro);
    int m_3 = pid_feedforward((-rForce-pForce-yawForce)/2+thrott+Zthro+Pthro);



    motor_setDuty(0,(m_0));
    motor_setDuty(2,(m_2));
    motor_setDuty(1,(m_1));
    motor_setDuty(3,(m_3));


    //    float x2 = angle.mpu.accX/2048;
    //    float y2 = angle.mpu.accY/2048;
    //    float z2 = angle.mpu.accZ/2048;
    //    float u = GRAVITY*sqrtf(x2*x2+y2*y2+z2*z2);
    //
    //    y_dd = - u * sin(angle.pitch*DEG_TO_RAD);
    //    x_dd = u * cos(angle.pitch*DEG_TO_RAD) * sin(angle.roll*DEG_TO_RAD);
    //    z_dd = u * cos(angle.pitch*DEG_TO_RAD) * cos(angle.roll*DEG_TO_RAD);
#if 1
    if((cnt++)%2==0){
        if(mask_bit){
            printf("_J_DATA: ");
        }
        if(mask_bit&(1<<S_SENSOR)){
            printf("QR %f QP %f QY %f ",angle.roll,angle.pitch,angle.yaw);
        }
        if(mask_bit&(1<<S_ACCEL)){
            printf("AX %d AY %d AZ %d ",angle.mpu.accX,angle.mpu.accY,angle.mpu.accZ);
        }
        if(mask_bit&(1<<S_WORLD_ACC)){
            printf("WX %d WY %d WZ %d HDR %d Zth %d ",aaWorld.x,aaWorld.y,aaWorld.z,z_HDR,Zthro);
        }
        if(mask_bit&(1<<S_GYRO)){
            printf("GX %d GY %d GZ %d ",angle.mpu.gyroX,angle.mpu.gyroY,angle.mpu.gyroZ);
        }
        if(mask_bit&(1<<S_BARO)){
            printf("GND %d NOW %d E %f ",ground_press,angle.ms_pressure,press_err);
        }
        if(mask_bit&(1<<S_dT)){
            printf("dT %f ",dt);
        }
        if(mask_bit&(1<<S_BATT)){
            int val;
            if(battery_read(&val)==0){
                printf("BAT %d ",val);
            }	
        }

        if(mask_bit&(1<<S_FULL)){
            //            printf("e %f %f ",pid[ROLL].err,pid[PITCH].err);
            //            printf("quat %7.2f %7.2f %7.2f %7.2f    ", q.w,q.x,q.y,q.z);
            //printf("euler %7.2f %7.2f %7.2f    ", euler[0] * 180/M_PI, euler[1] * 180/M_PI, euler[2] * 180/M_PI);
            //printf("ypr  %7.2f %7.2f %7.2f    ", angle.yaw,angle.pitch,angle.roll);
            //            printf("areal %6d %6d %6d    ", aaReal.x, aaReal.y, aaReal.z);
            printf("aworld %6d %6d %6d    ", aaWorld.x, aaWorld.y, aaWorld.z);

        }
        if(mask_bit){
            printf("\n");
        }
    }
#endif
#if 0
    float X = powf(((float)angle.mpu.accX/2048),2);
    float Y = powf(((float)angle.mpu.accY/2048),2);
    float Z = powf(((float)angle.mpu.accZ/2048),2);

    float acc=sqrtf(X+Y+Z)*GRAVITY;
    //	printf("acc %f ",acc);	
    motor_t z_dd = acc* cos(angle.roll*DEG_TO_RAD)*cos(angle.pitch*DEG_TO_RAD)-GRAVITY;
    //	printf("z_dd %f ",z_dd);
    pid_setErr(&pid[ZAXIS],z_dd);
    pid_setErrD(&pid[ZAXIS],z_dd-pid[ZAXIS].err_prev,dt);
    pid_setErrI(&pid[ZAXIS],z_dd,dt);
    pid_setErr_prev(&pid[ZAXIS],z_dd);
    int thro = pid_control(&pid[ZAXIS]);
    printf("thro %d ",thro);
#endif
#if 0
    motor_t mass=65; //65g
    motor_t alpha = 3.5;
    //motor_t x_dd = - zForce/mass * sin(angle.roll*DEG_TO_RAD);
    //motor_t y_dd = zForce/mass * cos(angle.roll*DEG_TO_RAD)*sin(angle.pitch*DEG_TO_RAD);
    motor_t z_dd = zForce/mass * cos(angle.roll*DEG_TO_RAD)*cos(angle.pitch*DEG_TO_RAD)-GRAVITY;

    pid_setErr(&pid[ZAXIS],z_dd);
    pid_setErrD(&pid[ZAXIS],pid[ZAXIS].err-pid[ZAXIS].err_prev,dt);
    pid_setErrI(&pid[ZAXIS],pid[ZAXIS].err,dt);	
    pid_setErr_prev(&pid[ZAXIS],z_dd);
    int omega = pid_control(&pid[ZAXIS]);
    zForce = omega*alpha;	
    int thro = omega*10000/328.625/(3.14*2);
#endif
    GpioWrite(LED_RED_LEFT,0);
}



/**********************************************************

  timer working function    High resolution timer + high priority process
  if endtime == 0 then infinite  wait for timer
  nperiod = nanoperiod,  nano end time;

 ************************************************************/
sigset_t set;
int TimerWorking(long nperiod, long nendtime){//if endtime == 0 then infinite  wait for timer 
    printf("into TimerWorking \n");
    struct itimerspec new_value, old_value;
    struct sigaction action;
    struct sigevent sevent;

    //struct sched_param sp = { .sched_priority = 10 };
    struct sched_param sp ;
    sp.sched_priority = 10;
    int ret;
    /* process  priority high */
    ret = sched_setscheduler(0, SCHED_FIFO, &sp);
    if (ret == -1) {
        perror("sched_setscheduler");
        return 1;
    }

    /* SIGALRM for printing time */
    memset (&action, 0, sizeof (struct sigaction));
    action.sa_handler = main_control_code;
    if (sigaction (SIGALRM, &action, NULL) == -1)
        perror ("sigaction");

    /* for program completion */
    memset (&sevent, 0, sizeof (struct sigevent));
    sevent.sigev_notify = SIGEV_SIGNAL;
    sevent.sigev_signo = SIGRTMIN;

    if (timer_create (CLOCK_MONOTONIC, NULL, &timer1) == -1)
        //	if (timer_create (CLOCK_REALTIME, NULL, &timer1) == -1)
        perror ("timer_create");

    new_value.it_interval.tv_sec = 0;
    new_value.it_interval.tv_nsec = nperiod; /* 1ms */
    new_value.it_value.tv_sec = 0;
    new_value.it_value.tv_nsec = nperiod; /* 1ms */
    if (timer_settime (timer1, 0, &new_value, &old_value) == -1)
        perror ("timer_settime");

    if (sigemptyset (&set) == -1)
        perror ("sigemptyset");

    if (sigaddset (&set, SIGRTMIN) == -1)
        perror ("sigaddset");

    if (sigprocmask (SIG_BLOCK, &set, NULL) == -1)
        perror ("sigprocmask");
#if 0
    timer_t timer2;
    if (timer_create (CLOCK_MONOTONIC, &sevent, &timer2) == -1)
        perror ("timer_create");
    if(nendtime!=0){
        new_value.it_interval.tv_sec = 0;
        new_value.it_interval.tv_nsec = 0; /* one time timer, no reset */
        new_value.it_value.tv_sec = 0;
        new_value.it_value.tv_nsec = nendtime; /* endtime */
        if (timer_settime (timer2, 0, &new_value, &old_value) == -1)
            perror ("timer_settime");
    }
#endif
    return 0;
}

int TimerWait()
{
    int signum;
    /* wait for completion signal (1 ms) */
    if (sigwait (&set, &signum) == -1)
        perror ("sigwait");
    exit (EXIT_SUCCESS);
    return 0;
}


void *t_function(void* data){
    while(1){
        //	sprintf(buffer,"observ %+f \n",observer);
        //	write(STDOUT_FILENO,buffer,strlen(buffer));
        if(mask_bit!=0){
            printf("_J_DATA:");
        }
        if(mask_bit&(1<<S_SENSOR)){
            printf("RR %+10.5f PP %+10.5f ",angle.roll,angle.pitch);
            //write(STDOUT_FILENO,buf,strlen(buf));
        }
        if(mask_bit&(1<<S_ACCEL)){
            printf("AX %+6d AY %+6d AZ %+6d ",angle.mpu.accX,angle.mpu.accY,angle.mpu.accZ);
            //write(STDOUT_FILENO,buf,strlen(buf));
        }
        if(mask_bit&(1<<S_GYRO)){
            printf("GX %+6d GY %+6d GZ %+6d ",angle.mpu.gyroX,angle.mpu.gyroY,angle.mpu.gyroZ);
            // write(STDOUT_FILENO,buf,strlen(buf));
        }
        if(mask_bit&(1<<S_BARO)){
            printf("GND %8d NOW %8d ",ground_press,angle.ms_pressure);
        }
        if(mask_bit&(1<<S_BATT)){
            int val;
            if(battery_read(&val)==0){
                printf("BAT %5d ",val);
            }	
        }

        if(mask_bit!=0){
            printf("\n");
        }
        usleep(5000);
    }
}
#define MOVEAVE_SIZE 10
uint32_t move_average[MOVEAVE_SIZE]={0,};
uint32_t filter_move_average(uint32_t input){
    int i;
    for(i=MOVEAVE_SIZE-1; i>0 ;i--){
        move_average[i]=move_average[i-1];
    }
    move_average[0]=input;
    uint32_t val=0;
    for(i=0;i<MOVEAVE_SIZE;i++){
        val += move_average[i];
    }
    return (val/MOVEAVE_SIZE);
}
pthread_mutex_t  mutex_press = PTHREAD_MUTEX_INITIALIZER;
//uint32_t sec,nsec;

void *press_function(void* data){
    while(1){
        MS5607SensorStartTemperatureSampling();
        usleep(8330);
        int32_t temperature_un = MS5607ReadTemperatureWhenAvailable();
        int32_t temperature = MS5607CompensateTemperature(temperature_un);
        if (temperature > -4000 && temperature < 8500 ){ 
            pthread_mutex_lock(&mutex_press);
            angle.ms_temperature = temperature;
            pthread_mutex_unlock(&mutex_press);
        }
        MS5607StartPressureSampling();
        usleep(8330);
        int32_t pressure_un = MS5607ReadPressureWhenAvailable();
        int32_t pressure = MS5607CompensatePressure(pressure_un);
        if (pressure > 70000 && pressure < 120000 ){
            pthread_mutex_lock(&mutex_press);
            //angle.ms_pressure = filter_move_average(pressure-100000)+100000;
            angle.ms_pressure = pressure;       
            pthread_mutex_unlock(&mutex_press);
        }
#if 0
        if(mask_bit!=0){
            printf("_J_DATA:");
        }

        if(mask_bit&(1<<S_dT)){
#if 1
            struct timespec tp;
            if (clock_gettime (CLOCK_MONOTONIC, &tp) == -1){
                perror("clock_gettime");
            }
            int val = tp.tv_nsec - nsec;
            if(val<0){
                val +=1000000000;
            }
            //printf("press time %d pres %d fil %d  \n",val,pressure,angle.ms_pressure );
            printf("dT %d ",val);
            nsec = tp.tv_nsec;
#endif
        }
        if(mask_bit&(1<<S_SENSOR)){
            printf("RR %f PP %f YY %f LPF %f ",angle.roll,angle.pitch,angle.yaw,temp_prev);
        }
        if(mask_bit&(1<<S_ACCEL)){
            printf("AX %d AY %d AZ %d                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              